#summary Структура данных в шарп

==Общее==
===Рассылка изменений===
Все классы, для которых требуется передача изменений "наверх", являются наследниками от базового класса `PipeNotifyObject`. Этот класс обеспечивает структуру для рассылки уведомлений о типизированном изменении (т.е. при разных изменениях может рассылаться разное уведомление) и реализует методы проверки самого себя на "целостность" с формированием сообщения об ошибке.

===Рисование===
Классы, которые имеют визуальное представление (должны рисоваться при помощи OpenGL), реализуют интерфейс `IDrawableDataObject`. У этих классов, через вызов метода `DataRepresentation()` можно получить список объектов класса `DrawableShape`, которые, собственно, и являются его визуальным представлением. Таким образом, например, труба (branch) рисует сразу свой каркас, сегменты и танки.

Собственно рисование осуществляет объект класса `DrawEngine`, который, используя методы интерфейса `IDrawableDataObject`, подготавливает объект к рисованию и собственно рисует представляющие его объекты. Этот объект создается при создании трубы.

===Запись в файл, чтение из файла===
Работа с файлом, в котором сохраняется труба, происходит при помощи методов `ReadFrom()` и `WriteTo()`, которые реализованы в соответствующих классах. Файл пишется в двоичном виде. Для поддержки совместимости, при записи используются версии (`streamVersion`) всех записываемых классов

==Труба==
Сама труба представлена классом `Pipe2`. Фактически, это некая оболочка для главной ветки. Через нее должны поставляться глобальные константы, обеспечиваться сохранение, экспорт и всякое подобное.

Сейчас - там только сохранение и загрузка из файла, методы для рисования и, собственно, главная ветка (свойство `MainBranch`).

==Ветка==
Главная и боковые ветки являются наследниками базового класса ветки `BaseBranch` (наследник `PipeNotifyObject`). Этот класс обеспечивает доступ к каркасу, сегментам и дочерним веткам и базовые методы работы с ними. 

===Свойства===
Класс имеет свойства для доступа к каркасу (`FrameBranchData Frame`), своим сегментам (`List<SegmentData> Segments`) и дочерним веткам(`BaseBranch this[int index]`). Также через свойства можно управлять видимостью ветки. 

===Методы===
Для формирования сегментов используется метод `ProcessFrame()`. В этом методе, на основе каркаса и (возможно) существующих сегментов происходит построение всех сегментов ветки.

Для работы (в частности, создания) с дочерними ветками также используются методы этого класса. Метод `NewBranch()` является абстрактным и перегружается в наследниках.

Также в этом классе реализованы базовые механизмы по управлению видимостью отдельных элементов ветки (каркас, сегменты, танки), механизм проверки целостности (перегрузка `Check()`), 