#summary Структура данных в шарп

==Общее==
===Рассылка изменений===
Все классы, для которых требуется передача изменений "наверх", являются наследниками от базового класса `PipeNotifyObject`. Этот класс обеспечивает структуру для рассылки уведомлений о типизированном изменении (т.е. при разных изменениях может рассылаться разное уведомление) и реализует методы проверки самого себя на "целостность" с формированием сообщения об ошибке.

===Рисование===
Классы, которые имеют визуальное представление (должны рисоваться при помощи OpenGL), реализуют интерфейс `IDrawableDataObject`. У этих классов, через вызов метода `DataRepresentation()` можно получить список объектов класса `DrawableShape`, которые, собственно, и являются его визуальным представлением. Таким образом, например, труба (branch) рисует сразу свой каркас, сегменты и танки.

Собственно рисование осуществляет объект класса `DrawEngine`, который, используя методы интерфейса `IDrawableDataObject`, подготавливает объект к рисованию и рисует представляющие его объекты. Этот объект создается при создании трубы.

===Запись в файл, чтение из файла===
Работа с файлом, в котором сохраняется труба, происходит при помощи методов `ReadFrom()` и `WriteTo()`, которые реализованы в соответствующих классах. Файл пишется в двоичном виде. Для поддержки совместимости, при записи используются версии (`streamVersion`) всех записываемых классов.

Для тестирования (с установленной переменной препроцессора `DEBUG`) можно использовать метод `DumpToFile()`, который выводит описание объекта в текстовый файл.

===Динамические свойства===
Свойства сегментов и веток должны отображаться и редактироваться в пользовательском интерфейсе в зависимости от состояния и свойств самих сегментов и веток. Для реализации такого поведения используются интерфейсы `ICustomizedEnumTypeObject` и `IDynamicPropertiesObject`. Первый - позволяет менять доступный пользователю список вариантов перечислимого свойства объекта в зависимости от значения какого-либо другого свойства (он реализован в прямом сегменте, чтобы управлять назначением типа сегмента "диффузор"). Второй - позволяет управлять видимостью и возможностью редактирования некоторых свойств сегментов и веток, в зависимости от типа сегмента и уровня ветки.
----

==Труба==
Труба представлена классом `Pipe2`. Фактически, это некая оболочка для главной ветки. Через нее должны поставляться глобальные константы, обеспечиваться сохранение, экспорт и всякое подобное.

Сейчас - там только сохранение и загрузка из файла, методы для рисования и, собственно, главная ветка (свойство `MainBranch`).
----

==Ветка==
Базовый класс ветки - `BaseBranch` (наследник `PipeNotifyObject`), наследниками которого являются главная и боковые ветки. Этот класс обеспечивает доступ к каркасу, сегментам и дочерним веткам и базовые методы работы с ними. 

====Свойства====
Класс имеет свойства для доступа к каркасу (`FrameBranchData Frame`), своим сегментам (`List<SegmentData> Segments`) и дочерним веткам(`BaseBranch this[int index]`). Также через свойства можно управлять видимостью ветки. 

====Методы====
Для формирования сегментов используется метод `ProcessFrame()`. В этом методе, на основе каркаса и (возможно) существующих сегментов происходит построение всех сегментов ветки.

Для работы с дочерними ветками (в частности, их создания) также используются методы этого класса. Метод `NewBranch()` является абстрактным и перегружается в наследниках.

Также в этом классе реализованы базовые механизмы по управлению видимостью отдельных элементов ветки (каркас, сегменты, танки) и механизм проверки целостности (перегрузка `Check()`).

Кроме того, этот класс реализует рассылку сообщений об изменениях (поскольку наследует от `PipeNotifyObject`)

===Главная ветка===
Главная ветка представлена классом `MainBranch`. В этом классе добавлены два танка, реализованы свойства по управлению видимостью отдельных элементов ветки, а также перегружены некоторые методы родительского класса `BaseBranch`.

Главная ветка автоматически создается при создании трубы (`Pipe2`) и не может быть скрыта или удалена. Именно через нее происходит обращение ко всем дочерним веткам трубы.

===Дочерние ветки===
Все дочерние ветки представлены объектами класса `Branch`. В этом классе добавлен один танк, а также перегружены некоторые методы родительского класса `BaseBranch`.
----

==Танк==
Танк представлен классом `Tank`. Пока он имеет только тип потока и некоторые геометрические свойства.
----

==Каркас==
Каркас как целое представлен классом `FrameBranchData`. Он обеспечивает доступ к узлам каркаса, их изменение и рисование.

Также в этом классе реализован механизм проверки целостности (перегрузка `Check()`).
----

==Сегмент==
Базовый класс ветки - `SegmentData` (наследник `PipeNotifyObject`), наследниками которого являются прямой сегмент (`StraightData`) и поворот (`BendData`). Этот класс обеспечивает доступ к свойствам сегмента и базовые методы работы с ними.

Также в этом классе реализован механизм проверки целостности (перегрузка `Check()`).

===Прямой сегмент===
Все доступные типы прямых сегментов реализованы одним классом `StraightData`. В объектах этого класса пользователю доступны для изменения только те свойства, которые имеют смысл для данного типа сегмента (сделано при помощи реализации интерфейсов `ICustomizedEnumTypeObject` и `IDynamicPropertiesObject`). На этапе разработки, обращение только к тем свойствам, которые имеют смысл для данного типа сегмента, возложено на разработчика.

Свойство `IsJoint` указывает присоединена ли хотя бы одна дочерняя ветка к этому сегменту.

===Поворот===
Поворот реализован классом `BendData`.
----

==Соответствие с дельфи==
|| *Класс, метод, тип* || *Дельфи* || *Шарп* ||
|| Ветка || `TBranch` || `MainBranch` - для главной;<br>`Branch` - для дочерних||
|| Сегменты ветки || `TBranch.Tube[]` - массив  || `Branch.Segments[]` - список ||
|| Основной массив веток || `Branch` - глобальный массив  || `Pipe2.MainBranch` - главная ветка<br>`Pipe2.MainBranch[]` - дочерние ветки у главной и далее - по иерархии||
|| Общее количество веток в трубе || `BranchesNum` || `MainBranch.GetAllChildBranchCount() + 1` ||
|| Входной бак главной ветки || `Branch[0].Tube[0]` || `MainBranch.SupplyTank`||
|| Выходной бак главной ветки || `Branch[BranchesNum-1].Tube[Branch[BranchesNum-1].ObjectsNum-1]` || `MainBranch.ReceiveTank`||
|| Бак дочерней ветки || `Branch[].Tube[Branch[].ObjectsNum-1]` || `Branch.Tank` ||
|| Тип дочерней ветки || `Branch[].FlowDirection` || `Branch.Tank.FlowDirection` ||
|| Сегменты в порядке от Receive к Supply  || `Branch[].Tube[GetTubeIndex(0)] - Branch[].Tube[GetTubeIndex(1)] ` || `Branch.FlowOrderedSegments[]` - список ||